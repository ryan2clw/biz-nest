// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   
  access_token       String?   
  expires_at         Int?      
  token_type         String?   
  scope              String?   
  id_token           String?   
  session_state      String?   
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int      @id @default(autoincrement())
  name          String?
  email         String?  @unique
  image         String?
  emailVerified DateTime?
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  admin
  customer
  user
}

model Profile {
  id        Int    @id @default(autoincrement())
  firstName String?
  lastName  String?
  screenName String?
  industry  String?
  userId    Int    @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role   @default(user)
  themePreference String @default("dark")
  orders          Order[]  // 1-to-many: Profile to Order
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}
model Order {
  id         Int         @id @default(autoincrement())
  profile    Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  Int
  orderDate  DateTime
  total      Float
  items      OrderItem[]
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int
  description String
  type        String
  unitPrice   Float
  quantity    Int
  total       Float
}